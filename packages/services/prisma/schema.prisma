// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// ---------------
// #MARK: Enums
// ---------------

enum ProfileType {
    person
    animal
}

enum Gender {
    male
    female
    other
}

enum ReportReason {
    offensive
    not_missing
    ownership
    other
}

// ---------------
// #MARK: Base models
// ---------------

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    profiles      Profile[]

    auth_provider String @default("password")
    auth_value    String

    reports_created Report[] @relation(name: "user_created")
    reports         Report[] @relation(name: "user")

    @@map("users")
}

// ---------------
// #MARK: Profile related
// ---------------

model Profile {
    id String @id @default(cuid())

    type        ProfileType
    name        String
    description String      @db.Text

    date_created     DateTime  @default(now())
    date_updated     DateTime  @updatedAt
    date_disappeared DateTime?
    date_found       DateTime?

    id_user_created String

    user_created User             @relation(fields: [id_user_created], references: [id], onDelete: Cascade)
    pictures     ProfilePicture[]
    addresses    ProfileAddress[]
    data         ProfileData?
    contact      ProfileContact?
    reports      Report[]

    @@map("profiles")
}

model ProfileData {
    id String @id @default(cuid())

    age    Int
    race   String
    gender Gender

    id_profile String @unique

    profile Profile @relation(fields: [id_profile], references: [id], onDelete: Cascade)

    @@map("profile_data")
}

model ProfileAddress {
    id String @id @default(cuid())

    district String?
    city     String?
    state    String?
    country  String  @default("brazil")

    id_profile String

    profile Profile @relation(fields: [id_profile], references: [id], onDelete: Cascade)

    @@map("profile_addresses")
}

model ProfilePicture {
    id String @id @default(cuid())

    key String @unique
    url String @unique

    id_profile String

    profile Profile @relation(fields: [id_profile], references: [id], onDelete: Cascade)

    @@map("profile_pictures")
}

model ProfileContact {
    id String @id @default(cuid())

    description String @default("")
    options     Json   @default("[]")

    id_profile String @unique

    profile Profile @relation(fields: [id_profile], references: [id], onDelete: Cascade)

    @@map("profile_contact")
}

// ---------------
// #MARK: Report
// ---------------

model Report {
    id String @id @default(cuid())

    reason      ReportReason
    description String       @default("")
    ip          String?

    id_user_created String?
    id_profile      String?
    id_user         String?

    profile      Profile? @relation(fields: [id_profile], references: [id], onDelete: Cascade)
    user         User?    @relation(name: "user", fields: [id_user], references: [id], onDelete: Cascade)
    user_created User?    @relation(name: "user_created", fields: [id_user_created], references: [id], onDelete: SetNull)

    @@map("reports")
}
